// package.json
{
  "name": "tool-sharing-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.1",
    "@supabase/supabase-js": "^2.39.3"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "eslint": "^8.55.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "vite": "^5.0.8"
  }
}

// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
})

// src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
)

// src/App.jsx
import React from 'react'
import { Routes, Route } from 'react-router-dom'
import { AuthProvider } from './contexts/AuthContext'
import Layout from './components/Layout/Layout'
import Home from './pages/Home/Home'
import Login from './pages/Auth/Login'
import Register from './pages/Auth/Register'
import Dashboard from './pages/Dashboard/Dashboard'
import AddTool from './pages/AddTool/AddTool'
import ToolDetail from './pages/ToolDetail/ToolDetail'
import Profile from './pages/Profile/Profile'
import ProtectedRoute from './components/ProtectedRoute/ProtectedRoute'

function App() {
  return (
    <AuthProvider>
      <Layout>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/tool/:id" element={<ToolDetail />} />
          <Route 
            path="/dashboard" 
            element={
              <ProtectedRoute>
                <Dashboard />
              </ProtectedRoute>
            } 
          />
          <Route 
            path="/add-tool" 
            element={
              <ProtectedRoute>
                <AddTool />
              </ProtectedRoute>
            } 
          />
          <Route 
            path="/profile" 
            element={
              <ProtectedRoute>
                <Profile />
              </ProtectedRoute>
            } 
          />
        </Routes>
      </Layout>
    </AuthProvider>
  )
}

export default App

// src/index.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Circular', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif;
  line-height: 1.43;
  color: #222222;
  background-color: #ffffff;
}

a {
  text-decoration: none;
  color: inherit;
}

button {
  border: none;
  background: none;
  cursor: pointer;
  font-family: inherit;
}

input, textarea, select {
  font-family: inherit;
  border: 1px solid #b0b0b0;
  border-radius: 8px;
  padding: 12px;
  font-size: 16px;
  width: 100%;
}

input:focus, textarea:focus, select:focus {
  outline: none;
  border-color: #FF385C;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 24px;
}

// src/lib/supabase.js
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'YOUR_SUPABASE_URL'
const supabaseAnonKey = 'YOUR_SUPABASE_ANON_KEY'

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// src/contexts/AuthContext.jsx
import React, { createContext, useContext, useEffect, useState } from 'react'
import { supabase } from '../lib/supabase'

const AuthContext = createContext()

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null)
      setLoading(false)
    })

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        setUser(session?.user ?? null)
        setLoading(false)
      }
    )

    return () => subscription.unsubscribe()
  }, [])

  const signUp = async (email, password, metadata = {}) => {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: metadata
      }
    })
    return { data, error }
  }

  const signIn = async (email, password) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    })
    return { data, error }
  }

  const signOut = async () => {
    const { error } = await supabase.auth.signOut()
    return { error }
  }

  const value = {
    user,
    signUp,
    signIn,
    signOut,
    loading
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

// src/components/Layout/Layout.jsx
import React from 'react'
import Header from '../Header/Header'
import styles from './Layout.module.css'

const Layout = ({ children }) => {
  return (
    <div className={styles.layout}>
      <Header />
      <main className={styles.main}>
        {children}
      </main>
    </div>
  )
}

export default Layout

// src/components/Layout/Layout.module.css
.layout {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.main {
  flex: 1;
  padding-top: 80px;
}

// src/components/Header/Header.jsx
import React, { useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { useAuth } from '../../contexts/AuthContext'
import styles from './Header.module.css'

const Header = () => {
  const { user, signOut } = useAuth()
  const navigate = useNavigate()
  const [showUserMenu, setShowUserMenu] = useState(false)

  const handleSignOut = async () => {
    await signOut()
    navigate('/')
    setShowUserMenu(false)
  }

  return (
    <header className={styles.header}>
      <div className="container">
        <div className={styles.headerContent}>
          <Link to="/" className={styles.logo}>
            <span className={styles.logoIcon}>🔧</span>
            ToolShare
          </Link>

          <nav className={styles.nav}>
            {user ? (
              <div className={styles.userMenu}>
                <Link to="/add-tool" className={styles.hostButton}>
                  Share a tool
                </Link>
                <div className={styles.userMenuContainer}>
                  <button 
                    className={styles.userMenuButton}
                    onClick={() => setShowUserMenu(!showUserMenu)}
                  >
                    <span className={styles.menuIcon}>☰</span>
                    <div className={styles.avatar}>
                      {user.user_metadata?.full_name?.[0] || user.email[0]}
                    </div>
                  </button>
                  {showUserMenu && (
                    <div className={styles.userMenuDropdown}>
                      <Link to="/dashboard" onClick={() => setShowUserMenu(false)}>
                        Dashboard
                      </Link>
                      <Link to="/profile" onClick={() => setShowUserMenu(false)}>
                        Profile
                      </Link>
                      <hr />
                      <button onClick={handleSignOut}>
                        Sign out
                      </button>
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <div className={styles.authButtons}>
                <Link to="/login" className={styles.loginButton}>
                  Log in
                </Link>
                <Link to="/register" className={styles.signupButton}>
                  Sign up
                </Link>
              </div>
            )}
          </nav>
        </div>
      </div>
    </header>
  )
}

export default Header

// src/components/Header/Header.module.css
.header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  background: white;
  border-bottom: 1px solid #EBEBEB;
  z-index: 100;
  height: 80px;
}

.headerContent {
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 80px;
}

.logo {
  display: flex;
  align-items: center;
  font-size: 24px;
  font-weight: 600;
  color: #FF385C;
}

.logoIcon {
  margin-right: 8px;
  font-size: 28px;
}

.nav {
  display: flex;
  align-items: center;
  gap: 16px;
}

.authButtons {
  display: flex;
  align-items: center;
  gap: 16px;
}

.loginButton {
  padding: 8px 16px;
  border-radius: 22px;
  font-weight: 500;
  transition: background-color 0.2s;
}

.loginButton:hover {
  background-color: #F7F7F7;
}

.signupButton {
  padding: 8px 16px;
  border-radius: 22px;
  font-weight: 500;
  background-color: #FF385C;
  color: white;
  transition: background-color 0.2s;
}

.signupButton:hover {
  background-color: #E00B41;
}

.hostButton {
  padding: 8px 16px;
  border-radius: 22px;
  font-weight: 500;
  transition: background-color 0.2s;
}

.hostButton:hover {
  background-color: #F7F7F7;
}

.userMenu {
  display: flex;
  align-items: center;
  gap: 16px;
}

.userMenuContainer {
  position: relative;
}

.userMenuButton {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 6px 6px 6px 12px;
  border: 1px solid #DDDDDD;
  border-radius: 21px;
  background: white;
  transition: box-shadow 0.2s;
}

.userMenuButton:hover {
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.18);
}

.menuIcon {
  font-size: 14px;
  color: #717171;
}

.avatar {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: #FF385C;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 500;
  font-size: 14px;
  text-transform: uppercase;
}

.userMenuDropdown {
  position: absolute;
  top: 100%;
  right: 0;
  margin-top: 8px;
  background: white;
  border: 1px solid #DDDDDD;
  border-radius: 12px;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.12);
  min-width: 200px;
  padding: 8px 0;
}

.userMenuDropdown a,
.userMenuDropdown button {
  display: block;
  width: 100%;
  padding: 12px 16px;
  text-align: left;
  transition: background-color 0.2s;
}

.userMenuDropdown a:hover,
.userMenuDropdown button:hover {
  background-color: #F7F7F7;
}

.userMenuDropdown hr {
  border: none;
  border-top: 1px solid #EBEBEB;
  margin: 8px 0;
}

// src/components/ProtectedRoute/ProtectedRoute.jsx
import React from 'react'
import { Navigate } from 'react-router-dom'
import { useAuth } from '../../contexts/AuthContext'

const ProtectedRoute = ({ children }) => {
  const { user, loading } = useAuth()

  if (loading) {
    return <div>Loading...</div>
  }

  if (!user) {
    return <Navigate to="/login" replace />
  }

  return children
}

export default ProtectedRoute

// src/components/ToolCard/ToolCard.jsx
import React from 'react'
import { Link } from 'react-router-dom'
import styles from './ToolCard.module.css'

const ToolCard = ({ tool }) => {
  return (
    <Link to={`/tool/${tool.id}`} className={styles.card}>
      <div className={styles.imageContainer}>
        {tool.image_url ? (
          <img src={tool.image_url} alt={tool.name} className={styles.image} />
        ) : (
          <div className={styles.placeholder}>🔧</div>
        )}
      </div>
      <div className={styles.content}>
        <div className={styles.location}>{tool.location}</div>
        <h3 className={styles.name}>{tool.name}</h3>
        <p className={styles.description}>{tool.description}</p>
        <div className={styles.category}>{tool.category}</div>
      </div>
    </Link>
  )
}

export default ToolCard

// src/components/ToolCard/ToolCard.module.css
.card {
  display: block;
  background: white;
  border-radius: 12px;
  overflow: hidden;
  transition: transform 0.2s, box-shadow 0.2s;
  cursor: pointer;
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
}

.imageContainer {
  position: relative;
  width: 100%;
  height: 200px;
  overflow: hidden;
  background: #F7F7F7;
}

.image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.placeholder {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 48px;
  color: #DDDDDD;
}

.content {
  padding: 16px;
}

.location {
  color: #717171;
  font-size: 14px;
  margin-bottom: 4px;
}

.name {
  font-size: 16px;
  font-weight: 600;
  margin-bottom: 8px;
  color: #222222;
}

.description {
  color: #717171;
  font-size: 14px;
  margin-bottom: 8px;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.category {
  display: inline-block;
  padding: 4px 8px;
  background: #F7F7F7;
  border-radius: 4px;
  font-size: 12px;
  color: #717171;
  text-transform: uppercase;
  font-weight: 500;
}

// src/pages/Home/Home.jsx
import React, { useState, useEffect } from 'react'
import { supabase } from '../../lib/supabase'
import ToolCard from '../../components/ToolCard/ToolCard'
import styles from './Home.module.css'

const Home = () => {
  const [tools, setTools] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('')

  const categories = [
    'All Categories',
    'Power Tools',
    'Hand Tools',
    'Garden Tools',
    'Automotive',
    'Kitchen Appliances',
    'Cleaning Equipment',
    'Other'
  ]

  useEffect(() => {
    fetchTools()
  }, [])

  const fetchTools = async () => {
    try {
      const { data, error } = await supabase
        .from('tools')
        .select(`
          *,
          profiles (
            full_name
          )
        `)
        .eq('is_available', true)
        .order('created_at', { ascending: false })

      if (error) throw error
      setTools(data || [])
    } catch (error) {
      console.error('Error fetching tools:', error)
    } finally {
      setLoading(false)
    }
  }

  const filteredTools = tools.filter(tool => {
    const matchesSearch = tool.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         tool.description.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesCategory = selectedCategory === '' || selectedCategory === 'All Categories' || 
                           tool.category === selectedCategory
    return matchesSearch && matchesCategory
  })

  if (loading) {
    return (
      <div className={styles.loading}>
        <div className="container">Loading tools...</div>
      </div>
    )
  }

  return (
    <div className={styles.home}>
      <div className={styles.hero}>
        <div className="container">
          <div className={styles.heroContent}>
            <h1 className={styles.heroTitle}>
              Share tools with your community
            </h1>
            <p className={styles.heroSubtitle}>
              Borrow tools from neighbors or share your own. Build a sustainable community together.
            </p>
          </div>
        </div>
      </div>

      <div className={styles.searchSection}>
        <div className="container">
          <div className={styles.searchContainer}>
            <input
              type="text"
              placeholder="Search tools..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className={styles.searchInput}
            />
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className={styles.categorySelect}
            >
              {categories.map(category => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      <div className={styles.toolsSection}>
        <div className="container">
          <div className={styles.toolsGrid}>
            {filteredTools.map(tool => (
              <ToolCard key={tool.id} tool={tool} />
            ))}
          </div>
          {filteredTools.length === 0 && (
            <div className={styles.noResults}>
              <p>No tools found matching your criteria.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default Home

// src/pages/Home/Home.module.css
.home {
  min-height: calc(100vh - 80px);
}

.hero {
  background: linear-gradient(135deg, #FF385C 0%, #E00B41 100%);
  color: white;
  text-align: center;
  padding: 80px 0;
}

.heroContent {
  max-width: 600px;
  margin: 0 auto;
}

.heroTitle {
  font-size: 48px;
  font-weight: 600;
  margin-bottom: 24px;
  line-height: 1.1;
}

.heroSubtitle {
  font-size: 20px;
  opacity: 0.9;
  line-height: 1.5;
}

.searchSection {
  padding: 40px 0;
  background: #F7F7F7;
}

.searchContainer {
  display: grid;
  grid-template-columns: 1fr auto;
  gap: 16px;
  max-width: 600px;
  margin: 0 auto;
}

.searchInput {
  font-size: 16px;
  padding: 16px 20px;
  border-radius: 32px;
  border: 1px solid #DDDDDD;
  background: white;
}

.categorySelect {
  padding: 16px 20px;
  border-radius: 32px;
  border: 1px solid #DDDDDD;
  background: white;
  min-width: 180px;
}

.toolsSection {
  padding: 40px 0;
}

.toolsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 24px;
}

.loading {
  padding: 80px 0;
  text-align: center;
  font-size: 18px;
  color: #717171;
}

.noResults {
  text-align: center;
  padding: 80px 0;
  color: #717171;
  font-size: 18px;
}

@media (max-width: 768px) {
  .heroTitle {
    font-size: 32px;
  }
  
  .heroSubtitle {
    font-size: 18px;
  }
  
  .searchContainer {
    grid-template-columns: 1fr;
  }
  
  .toolsGrid {
    grid-template-columns: 1fr;
  }
}

// src/pages/Auth/Login.jsx
import React, { useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { useAuth } from '../../contexts/AuthContext'
import styles from './Auth.module.css'

const Login = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  
  const { signIn } = useAuth()
  const navigate = useNavigate()

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    const { error } = await signIn(email, password)
    
    if (error) {
      setError(error.message)
    } else {
      navigate('/dashboard')
    }
    
    setLoading(false)
  }

  return (
    <div className={styles.authPage}>
      <div className="container">
        <div className={styles.authContainer}>
          <div className={styles.authCard}>
            <h1 className={styles.title}>Welcome back</h1>
            <p className={styles.subtitle}>Sign in to your ToolShare account</p>
            
            <form onSubmit={handleSubmit} className={styles.form}>
              {error && (
                <div className={styles.error}>
                  {error}
                </div>
              )}
              
              <div className={styles.field}>
                <label htmlFor="email">Email</label>
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
              </div>
              
              <div className={styles.field}>
                <label htmlFor="password">Password</label>
                <input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
              </div>
              
              <button 
                type="submit" 
                className={styles.submitButton}
                disabled={loading}
              >
                {loading ? 'Signing in...' : 'Sign in'}
              </button>
            </form>
            
            <p className={styles.switchAuth}>
              Don't have an account? <Link to="/register">Sign up</Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Login

// src/pages/Auth/Register.jsx
import React, { useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { useAuth } from '../../contexts/AuthContext'
import styles from './Auth.module.css'

const Register = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [fullName, setFullName] = useState('')
  const [location, setLocation] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  
  const { signUp } = useAuth()
  const navigate = useNavigate()

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    const { error } = await signUp(email, password, {
      full_name: fullName,
      location: location
    })
    
    if (error) {
      setError(error.message)
    } else {
      navigate('/dashboard')
    }
    
    setLoading(false)
  }

  return (
    <div className={styles.authPage}>
      <div className="container">
        <div className={styles.authContainer}>
          <div className={styles.authCard}>
            <h1 className={styles.title}>Join ToolShare</h1>
            <p className={styles.subtitle}>Create your account to start sharing</p>
            
            <form onSubmit={handleSubmit} className={styles.form}>
              {error && (
                <div className={styles.error}>
                  {error}
                </div>
              )}
              
              <div className={styles.field}>
                <label htmlFor="fullName">Full Name</label>
                <input
                  id="fullName"
                  type="text"
                  value={fullName}
                  onChange={(e) => setFullName(e.target.value)}
                  required
                />
              </div>
              
              <div className={styles.field}>
                <label htmlFor="email">Email</label>
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
              </div>
              
              <div className={styles.field}>
                <label htmlFor="location">Location</label>
                <input
                  id="location"
                  type="text"
                  placeholder="City, State"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  required
                />
              </div>
              
              <div className={styles.field}>
                <label htmlFor="password">Password</label>
                <input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
              </div>
              
              <button 
                type="submit" 
                className={styles.submitButton}
                disabled={loading}
              >
                {loading ? 'Creating account...' : 'Sign up'}
              </button>
            </form>
            
            <p className={styles.switchAuth}>
              Already have an account? <Link to="/login">Sign in</Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Register

// src/pages/Auth/Auth.module.css
.authPage {
  min-height: calc(100vh - 80px);
  display: flex;
  align-items: center;
  background: #F7F7F7;
}

.authContainer {
  display: flex;
  justify-content: center;
  padding: 40px 0;
}

.authCard {
  background: white;
  border-radius: 12px;
  padding: 48px;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.12);
  width: 100%;
  max-width: 400px;
}

.title {
  font-size: 32px;
  font-weight: 600;
  text-align: center;
  margin-bottom: 8px;
  color: #222222;
}

.subtitle {
  text-align: center;
  color: #717171;
  margin-bottom: 32px;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.field {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.field label {
  font-weight: 500;
  color: #222222;
}

.submitButton {
  background: #FF385C;
  color: white;
  padding: 16px;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  transition: background-color 0.2s;
}

.submitButton:hover:not(:disabled) {
  background: #E00B41;
}

.submitButton:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.error {
  background: #FFF5F5;
  border: 1px solid #FED7D7;
  color: #C53030;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 14px;
}

.switchAuth {
  text-align: center;
  margin-top: 24px;
  color: #717171;
}

.switchAuth a {
  color: #FF385C;
  font-weight: 500;
}

.switchAuth a:hover {
  text-decoration: underline;
}

// src/pages/Dashboard/Dashboard.jsx
import React, { useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { supabase } from '../../lib/supabase'
import { useAuth } from '../../contexts/AuthContext'
import styles from './Dashboard.module.css'

const Dashboard = () => {
  const { user } = useAuth()
  const [myTools, setMyTools] = useState([])
  const [borrowRequests, setBorrowRequests] = useState([])
  const [myRequests, setMyRequests] = useState([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (user) {
      fetchDashboardData()
    }
  }, [user])

  const fetchDashboardData = async () => {
    try {
      // Fetch user's tools
      const { data: toolsData, error: toolsError } = await supabase
        .from('tools')
        .select('*')
        .eq('owner_id', user.id)
        .order('created_at', { ascending: false })

      if (toolsError) throw toolsError
      setMyTools(toolsData || [])

      // Fetch borrow requests for user's tools
      const { data: requestsData, error: requestsError } = await supabase
        .from('borrow_requests')
        .select(`
          *,
          tools (name, category),
          profiles (full_name, location)
        `)
        .in('tool_id', toolsData?.map(tool => tool.id) || [])
        .order('created_at', { ascending: false })

      if (requestsError) throw requestsError
      setBorrowRequests(requestsData || [])

      // Fetch user's own requests
      const { data: myRequestsData, error: myRequestsError } = await supabase
        .from('borrow_requests')
        .select(`
          *,
          tools (name, category, owner_id),
          profiles (full_name, location)
        `)
        .eq('requester_id', user.id)
        .order('created_at', { ascending: false })

      if (myRequestsError) throw myRequestsError
      setMyRequests(myRequestsData || [])

    } catch (error) {
      console.error('Error fetching dashboard data:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleRequestResponse = async (requestId, status) => {
    try {
      const { error } = await supabase
        .from('borrow_requests')
        .update({ status })
        .eq('id', requestId)

      if (error) throw error
      
      // Refresh data
      fetchDashboardData()
    } catch (error) {
      console.error('Error updating request:', error)
    }
  }

  if (loading) {
    return (
      <div className={styles.loading}>
        <div className="container">Loading dashboard...</div>
      </div>
    )
  }

  return (
    <div className={styles.dashboard}>
      <div className="container">
        <div className={styles.header}>
          <h1>Dashboard</h1>
          <Link to="/add-tool" className={styles.addButton}>
            + Add New Tool
          </Link>
        </div>

        <div className={styles.sections}>
          {/* My Tools */}
          <section className={styles.section}>
            <h2>My Tools ({myTools.length})</h2>
            <div className={styles.toolsGrid}>
              {myTools.map(tool => (
                <div key={tool.id} className={styles.toolCard}>
                  <div className={styles.toolImage}>
                    {tool.image_url ? (
                      <img src={tool.image_url} alt={tool.name} />
                    ) : (
                      <div className={styles.placeholder}>🔧</div>
                    )}
                  </div>
                  <div className={styles.toolInfo}>
                    <h3>{tool.name}</h3>
                    <p className={styles.category}>{tool.category}</p>
                    <p className={styles.status}>
                      Status: {tool.is_available ? 'Available' : 'Not Available'}
                    </p>
                  </div>
                </div>
              ))}
              {myTools.length === 0 && (
                <p className={styles.emptyState}>
                  You haven't added any tools yet. <Link to="/add-tool">Add your first tool</Link>
                </p>
              )}
            </div>
          </section>

          {/* Incoming Requests */}
          <section className={styles.section}>
            <h2>Requests for My Tools ({borrowRequests.length})</h2>
            <div className={styles.requestsList}>
              {borrowRequests.map(request => (
                <div key={request.id} className={styles.requestCard}>
                  <div className={styles.requestInfo}>
                    <h3>{request.profiles?.full_name}</h3>
                    <p>wants to borrow <strong>{request.tools?.name}</strong></p>
                    <p className={styles.requestDate}>
                      From {new Date(request.start_date).toLocaleDateString()} 
                      to {new Date(request.end_date).toLocaleDateString()}
                    </p>
                    {request.message && (
                      <p className={styles.message}>"{request.message}"</p>
                    )}
                    <p className={styles.location}>📍 {request.profiles?.location}</p>
                  </div>
                  <div className={styles.requestActions}>
                    <span className={`${styles.status} ${styles[request.status]}`}>
                      {request.status}
                    </span>
                    {request.status === 'pending' && (
                      <div className={styles.actionButtons}>
                        <button 
                          onClick={() => handleRequestResponse(request.id, 'approved')}
                          className={styles.approveButton}
                        >
                          Approve
                        </button>
                        <button 
                          onClick={() => handleRequestResponse(request.id, 'rejected')}
                          className={styles.rejectButton}
                        >
                          Reject
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              ))}
              {borrowRequests.length === 0 && (
                <p className={styles.emptyState}>No requests for your tools yet.</p>
              )}
            </div>
          </section>

          {/* My Requests */}
          <section className={styles.section}>
            <h2>My Borrow Requests ({myRequests.length})</h2>
            <div className={styles.requestsList}>
              {myRequests.map(request => (
                <div key={request.id} className={styles.requestCard}>
                  <div className={styles.requestInfo}>
                    <h3>{request.tools?.name}</h3>
                    <p className={styles.requestDate}>
                      From {new Date(request.start_date).toLocaleDateString()} 
                      to {new Date(request.end_date).toLocaleDateString()}
                    </p>
                    {request.message && (
                      <p className={styles.message}>"{request.message}"</p>
                    )}
                  </div>
                  <div className={styles.requestActions}>
                    <span className={`${styles.status} ${styles[request.status]}`}>
                      {request.status}
                    </span>
                  </div>
                </div>
              ))}
              {myRequests.length === 0 && (
                <p className={styles.emptyState}>You haven't made any borrow requests yet.</p>
              )}
            </div>
          </section>
        </div>
      </div>
    </div>
  )
}

export default Dashboard

// src/pages/Dashboard/Dashboard.module.css
.dashboard {
  padding: 40px 0;
  min-height: calc(100vh - 80px);
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 40px;
}

.header h1 {
  font-size: 32px;
  font-weight: 600;
  color: #222222;
}

.addButton {
  background: #FF385C;
  color: white;
  padding: 12px 24px;
  border-radius: 8px;
  font-weight: 500;
  transition: background-color 0.2s;
}

.addButton:hover {
  background: #E00B41;
}

.sections {
  display: flex;
  flex-direction: column;
  gap: 48px;
}

.section h2 {
  font-size: 24px;
  font-weight: 600;
  margin-bottom: 24px;
  color: #222222;
}

.toolsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 24px;
}

.toolCard {
  background: white;
  border: 1px solid #EBEBEB;
  border-radius: 12px;
  overflow: hidden;
  transition: box-shadow 0.2s;
}

.toolCard:hover {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.toolImage {
  height: 160px;
  background: #F7F7F7;
  display: flex;
  align-items: center;
  justify-content: center;
}

.toolImage img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.placeholder {
  font-size: 48px;
  color: #DDDDDD;
}

.toolInfo {
  padding: 16px;
}

.toolInfo h3 {
  font-size: 16px;
  font-weight: 600;
  margin-bottom: 8px;
  color: #222222;
}

.category {
  color: #717171;
  font-size: 14px;
  margin-bottom: 8px;
}

.status {
  font-size: 14px;
  font-weight: 500;
}

.requestsList {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.requestCard {
  background: white;
  border: 1px solid #EBEBEB;
  border-radius: 12px;
  padding: 24px;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 24px;
}

.requestInfo {
  flex: 1;
}

.requestInfo h3 {
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 8px;
  color: #222222;
}

.requestDate {
  color: #717171;
  margin-bottom: 8px;
}

.message {
  font-style: italic;
  color: #717171;
  margin-bottom: 8px;
  padding: 8px 12px;
  background: #F7F7F7;
  border-radius: 6px;
}

.location {
  color: #717171;
  font-size: 14px;
}

.requestActions {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 12px;
}

.status {
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
  text-transform: capitalize;
}

.status.pending {
  background: #FEF3C7;
  color: #92400E;
}

.status.approved {
  background: #D1FAE5;
  color: #065F46;
}

.status.rejected {
  background: #FEE2E2;
  color: #991B1B;
}

.actionButtons {
  display: flex;
  gap: 8px;
}

.approveButton {
  background: #10B981;
  color: white;
  padding: 8px 16px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  transition: background-color 0.2s;
}

.approveButton:hover {
  background: #059669;
}

.rejectButton {
  background: #EF4444;
  color: white;
  padding: 8px 16px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  transition: background-color 0.2s;
}

.rejectButton:hover {
  background: #DC2626;
}

.emptyState {
  color: #717171;
  text-align: center;
  padding: 40px;
  font-size: 16px;
}

.emptyState a {
  color: #FF385C;
  font-weight: 500;
}

.loading {
  padding: 80px 0;
  text-align: center;
  font-size: 18px;
  color: #717171;
}

@media (max-width: 768px) {
  .header {
    flex-direction: column;
    align-items: flex-start;
    gap: 16px;
  }
  
  .requestCard {
    flex-direction: column;
    gap: 16px;
  }
  
  .requestActions {
    align-items: flex-start;
    width: 100%;
  }
  
  .actionButtons {
    width: 100%;
  }
  
  .approveButton,


// src/pages/AddTool/AddTool.jsx
import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { supabase } from '../../lib/supabase'
import { useAuth } from '../../contexts/AuthContext'
import styles from './AddTool.module.css'

const AddTool = () => {
  const { user } = useAuth()
  const navigate = useNavigate()
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    category: '',
    location: '',
    image_url: '',
    is_available: true
  })
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  const categories = [
    'Power Tools',
    'Hand Tools',
    'Garden Tools',
    'Automotive',
    'Kitchen Appliances',
    'Cleaning Equipment',
    'Other'
  ]

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      const { error } = await supabase
        .from('tools')
        .insert([{
          ...formData,
          owner_id: user.id
        }])

      if (error) throw error

      navigate('/dashboard')
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className={styles.addTool}>
      <div className="container">
        <div className={styles.header}>
          <h1>Share a Tool</h1>
          <p>Help your community by sharing tools you're not using</p>
        </div>

        <form onSubmit={handleSubmit} className={styles.form}>
          {error && (
            <div className={styles.error}>
              {error}
            </div>
          )}

          <div className={styles.formGrid}>
            <div className={styles.field}>
              <label htmlFor="name">Tool Name *</label>
              <input
                id="name"
                name="name"
                type="text"
                value={formData.name}
                onChange={handleChange}
                required
                placeholder="e.g., Cordless Drill"
              />
            </div>

            <div className={styles.field}>
              <label htmlFor="category">Category *</label>
              <select
                id="category"
                name="category"
                value={formData.category}
                onChange={handleChange}
                required
              >
                <option value="">Select a category</option>
                {categories.map(category => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>
            </div>

            <div className={styles.field}>
              <label htmlFor="location">Location *</label>
              <input
                id="location"
                name="location"
                type="text"
                value={formData.location}
                onChange={handleChange}
                required
                placeholder="City, State"
              />
            </div>

            <div className={styles.field}>
              <label htmlFor="image_url">Image URL (optional)</label>
              <input
                id="image_url"
                name="image_url"
                type="url"
                value={formData.image_url}
                onChange={handleChange}
                placeholder="https://example.com/image.jpg"
              />
            </div>
          </div>

          <div className={styles.field}>
            <label htmlFor="description">Description *</label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              required
              rows={4}
              placeholder="Describe your tool, its condition, and any special instructions for borrowers..."
            />
          </div>

          <div className={styles.checkboxField}>
            <label className={styles.checkboxLabel}>
              <input
                type="checkbox"
                name="is_available"
                checked={formData.is_available}
                onChange={handleChange}
              />
              <span className={styles.checkmark}></span>
              Available for borrowing
            </label>
          </div>

          <div className={styles.actions}>
            <button 
              type="button" 
              onClick={() => navigate('/dashboard')}
              className={styles.cancelButton}
            >
              Cancel
            </button>
            <button 
              type="submit" 
              className={styles.submitButton}
              disabled={loading}
            >
              {loading ? 'Adding Tool...' : 'Add Tool'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default AddTool

// src/pages/AddTool/AddTool.module.css
.addTool {
  padding: 40px 0;
  min-height: calc(100vh - 80px);
}

.header {
  text-align: center;
  margin-bottom: 48px;
}

.header h1 {
  font-size: 32px;
  font-weight: 600;
  margin-bottom: 12px;
  color: #222222;
}

.header p {
  font-size: 18px;
  color: #717171;
}

.form {
  max-width: 600px;
  margin: 0 auto;
  background: white;
  padding: 48px;
  border-radius: 16px;
  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.12);
}

.formGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 24px;
  margin-bottom: 24px;
}

.field {
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-bottom: 24px;
}

.field label {
  font-weight: 500;
  color: #222222;
}

.field textarea {
  resize: vertical;
  min-height: 100px;
}

.checkboxField {
  margin-bottom: 32px;
}

.checkboxLabel {
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
  font-weight: 500;
  color: #222222;
}

.checkboxLabel input[type="checkbox"] {
  width: auto;
  margin: 0;
}

.checkmark {
  position: relative;
}

.actions {
  display: flex;
  gap: 16px;
  justify-content: flex-end;
}

.cancelButton {
  padding: 12px 24px;
  border: 1px solid #DDDDDD;
  border-radius: 8px;
  font-weight: 500;
  color: #717171;
  transition: all 0.2s;
}

.cancelButton:hover {
  border-color: #B0B0B0;
  color: #222222;
}

.submitButton {
  background: #FF385C;
  color: white;
  padding: 12px 24px;
  border-radius: 8px;
  font-weight: 500;
  transition: background-color 0.2s;
}

.submitButton:hover:not(:disabled) {
  background: #E00B41;
}

.submitButton:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.error {
  background: #FFF5F5;
  border: 1px solid #FED7D7;
  color: #C53030;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 14px;
  margin-bottom: 24px;
}

@media (max-width: 768px) {
  .form {
    padding: 32px 24px;
  }
  
  .formGrid {
    grid-template-columns: 1fr;
  }
  
  .actions {
    flex-direction: column;
  }
}

// src/pages/ToolDetail/ToolDetail.jsx
import React, { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { supabase } from '../../lib/supabase'
import { useAuth } from '../../contexts/AuthContext'
import styles from './ToolDetail.module.css'

const ToolDetail = () => {
  const { id } = useParams()
  const { user } = useAuth()
  const navigate = useNavigate()
  
  const [tool, setTool] = useState(null)
  const [loading, setLoading] = useState(true)
  const [showRequestForm, setShowRequestForm] = useState(false)
  const [requestForm, setRequestForm] = useState({
    start_date: '',
    end_date: '',
    message: ''
  })
  const [submitting, setSubmitting] = useState(false)

  useEffect(() => {
    fetchTool()
  }, [id])

  const fetchTool = async () => {
    try {
      const { data, error } = await supabase
        .from('tools')
        .select(`
          *,
          profiles (
            full_name,
            location
          )
        `)
        .eq('id', id)
        .single()

      if (error) throw error
      setTool(data)
    } catch (error) {
      console.error('Error fetching tool:', error)
      navigate('/')
    } finally {
      setLoading(false)
    }
  }

  const handleRequestSubmit = async (e) => {
    e.preventDefault()
    if (!user) {
      navigate('/login')
      return
    }

    setSubmitting(true)
    try {
      const { error } = await supabase
        .from('borrow_requests')
        .insert([{
          tool_id: tool.id,
          requester_id: user.id,
          start_date: requestForm.start_date,
          end_date: requestForm.end_date,
          message: requestForm.message,
          status: 'pending'
        }])

      if (error) throw error

      alert('Request sent successfully!')
      setShowRequestForm(false)
      setRequestForm({ start_date: '', end_date: '', message: '' })
    } catch (error) {
      console.error('Error sending request:', error)
      alert('Failed to send request. Please try again.')
    } finally {
      setSubmitting(false)
    }
  }

  if (loading) {
    return (
      <div className={styles.loading}>
        <div className="container">Loading tool details...</div>
      </div>
    )
  }

  if (!tool) {
    return (
      <div className={styles.notFound}>
        <div className="container">Tool not found</div>
      </div>
    )
  }

  const isOwner = user?.id === tool.owner_id

  return (
    <div className={styles.toolDetail}>
      <div className="container">
        <div className={styles.content}>
          <div className={styles.imageSection}>
            {tool.image_url ? (
              <img src={tool.image_url} alt={tool.name} className={styles.image} />
            ) : (
              <div className={styles.placeholder}>🔧</div>
            )}
          </div>

          <div className={styles.infoSection}>
            <div className={styles.header}>
              <div className={styles.category}>{tool.category}</div>
              <h1 className={styles.title}>{tool.name}</h1>
              <div className={styles.location}>📍 {tool.location}</div>
            </div>

            <div className={styles.description}>
              <h3>Description</h3>
              <p>{tool.description}</p>
            </div>

            <div className={styles.owner}>
              <h3>Shared by</h3>
              <p>{tool.profiles?.full_name}</p>
              <p className={styles.ownerLocation}>{tool.profiles?.location}</p>
            </div>

            <div className={styles.availability}>
              <span className={`${styles.status} ${tool.is_available ? styles.available : styles.unavailable}`}>
                {tool.is_available ? '✓ Available' : '✗ Not Available'}
              </span>
            </div>

            {!isOwner && tool.is_available && (
              <div className={styles.actions}>
                {!showRequestForm ? (
                  <button 
                    onClick={() => setShowRequestForm(true)}
                    className={styles.requestButton}
                  >
                    Request to Borrow
                  </button>
                ) : (
                  <form onSubmit={handleRequestSubmit} className={styles.requestForm}>
                    <h3>Request to Borrow</h3>
                    <div className={styles.dateFields}>
                      <div className={styles.field}>
                        <label>Start Date</label>
                        <input
                          type="date"
                          value={requestForm.start_date}
                          onChange={(e) => setRequestForm(prev => ({
                            ...prev,
                            start_date: e.target.value
                          }))}
                          required
                          min={new Date().toISOString().split('T')[0]}
                        />
                      </div>
                      <div className={styles.field}>
                        <label>End Date</label>
                        <input
                          type="date"
                          value={requestForm.end_date}
                          onChange={(e) => setRequestForm(prev => ({
                            ...prev,
                            end_date: e.target.value
                          }))}
                          required
                          min={requestForm.start_date || new Date().toISOString().split('T')[0]}
                        />
                      </div>
                    </div>
                    <div className={styles.field}>
                      <label>Message (optional)</label>
                      <textarea
                        value={requestForm.message}
                        onChange={(e) => setRequestForm(prev => ({
                          ...prev,
                          message: e.target.value
                        }))}
                        placeholder="Tell the owner why you need this tool and any other details..."
                        rows={3}
                      />
                    </div>
                    <div className={styles.formActions}>
                      <button 
                        type="button"
                        onClick={() => setShowRequestForm(false)}
                        className={styles.cancelButton}
                      >
                        Cancel
                      </button>
                      <button 
                        type="submit"
                        className={styles.submitButton}
                        disabled={submitting}
                      >
                        {submitting ? 'Sending...' : 'Send Request'}
                      </button>
                    </div>
                  </form>
                )}
              </div>
            )}

            {isOwner && (
              <div className={styles.ownerNote}>
                <p>This is your tool. You can manage it from your dashboard.</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export default ToolDetail